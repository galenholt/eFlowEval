---
title: "vegPlots_Basin"
author: "Galen Holt"
format: html
editor: visual
---

## Setup

Just copying from metabolism, likely don't need all of it

```{r setup}
# set the root to the project directory, not the rmd directory
knitr::opts_knit$set(root.dir = rprojroot::find_rstudio_root_file())
# default to not printing the code
knitr::opts_chunk$set(echo = FALSE)


```

```{r}
# libraries
library(tidyverse)
library(lubridate)
library(sf)
library(stars)
library(tmap)
library(transformr) # not needed for this doc at present?
library(gganimate) # not needed here at present
library(viridis)
library(colorspace)
library(patchwork)
```

```{r}
#| message = FALSE
# source in the data management

source('directorySet.R')
source(file.path('Scripts', 'Scenarios', 'plotting', 'vegPlotSetup_Basin.R'))

```

Get the data in

```{r}
veg_catch <- veg_yr_prep(datOut = datOut)
```

## Overview

This is going to start as crudely making plots, then move closer to what metabolism had, including developing standard plot functions.

I'm basing all of this on the annual data for simplicity, with all values the max area of passed strictures over the year (for whichever stricture).

The values are also not to be trusted- this is a capacity demonstration, and things like the yearly sum of bimonthly ER estimated just for the maximum extent is not an informative unit, and the values do not say much about what's actually going on in the system.

```{r}
# make a list of the potential times- don't use inundation, it goes back too far
availDays <- st_get_dimension_values( veg_catch$lippia$lippiayr$fullCycle_anae_lippia, 
                                      which = 'time')
# availDays <- availDays[2:length(availDays)] # since the first temp is NA


datewanted <- as.character(availDays[3]) # just pick something for now
```

## Build up the strictures

I think I'll start by building up the strictures, both as maps and bar/line plots. Just do a single year for now.

Fill is automatic

```{r}
dateind <- which(st_get_dimension_values(veg_catch$lippia$lippiayr$germ_Lippia, which = 'time') == datewanted)

l1 <- ggplot() +
  geom_stars(data = veg_catch$lippia$lippiayr$germ_Lippia[,,dateind]) +
  scale_fill_continuous_sequential(palette = 'YlOrRd', trans = 'log10')
l2 <- ggplot() +
  geom_stars(data = veg_catch$lippia$lippiayr$surv_Lippia[,,dateind])+
  scale_fill_continuous_sequential(palette = 'YlOrRd', trans = 'log10')
l1_2 <- ggplot() +
  geom_stars(data = veg_catch$lippia$lippiayr$germSurv_Lippia[,,dateind])+
  scale_fill_continuous_sequential(palette = 'YlOrRd', trans = 'log10')
l_all <- ggplot() +
  geom_stars(data = veg_catch$lippia$lippiayr$fullCycle_anae_lippia[,,dateind])+
  scale_fill_continuous_sequential(palette = 'YlOrRd', trans = 'log10')
```

```{r}
(l1 + l2) / (l1_2 + l_all)
```

Couple notes here-

-   the metabolism used the sf dataframes, not the stars, since plot control is easier

-   going to need to do something about the scaling. likely a big division to get to sq km or hectares or somethign, and then still log it and force the same scale across plots. Moving quickly into the metabolism plot functions.

Centipeda

```{r}
dateind <- which(st_get_dimension_values(veg_catch$lippia$lippiayr$germ_Lippia, which = 'time') == datewanted)

c1 <- ggplot() +
  geom_stars(data = veg_catch$centipeda$centipedayr$seedsurv_centipeda[,,dateind]) +
  scale_fill_continuous_sequential(palette = 'GnBu', trans = 'log10')

c2 <- ggplot() +
  geom_stars(data = veg_catch$centipeda$centipedayr$seedsurv_germ_centipeda[,,dateind])+
  scale_fill_continuous_sequential(palette = 'GnBu', trans = 'log10')

c1_2 <- ggplot() +
  geom_stars(data = veg_catch$centipeda$centipedayr$seedsurv_germ_fruit_centipeda[,,dateind])+
  scale_fill_continuous_sequential(palette = 'GnBu', trans = 'log10')

c_all <- ggplot() +
  geom_stars(data = veg_catch$centipeda$centipedayr$fullCycle_anae_centipeda[,,dateind])+
  scale_fill_continuous_sequential(palette = 'GnBu', trans = 'log10')

c_lippialimit <- ggplot() +
  geom_stars(data = veg_catch$centipeda$centipedayr$fullCycle_lippiaLimit_centipeda[,,dateind])+
  scale_fill_continuous_sequential(palette = 'GnBu', trans = 'log10')
```

```{r}
(c1 + c2) / (c1_2 + c_all)
```

```{r}
c_all + c_lippialimit
```

Can I make those plots with sf?

```{r}
c1_sf <- veg_catch$centipeda$centipedadf$seedsurv_centipeda %>% 
  mutate(hectares = area_centipeda_seed_survival/10000) %>% 
  filter(date == datewanted) %>% 
  ggplot() +
  geom_sf(mapping = aes(fill = hectares)) +
  scale_fill_continuous_sequential(palette = 'GnBu', trans = 'log10')
```

```{r}
c1_sf
```

How about a timeseries? Same plot

```{r}
c1_sf_t <- veg_catch$centipeda$centipedadf$seedsurv_centipeda %>% 
  mutate(hectares = area_centipeda_seed_survival/10000) %>% 
  ggplot() +
  geom_sf(mapping = aes(fill = hectares)) +
  scale_fill_continuous_sequential(palette = 'GnBu', trans = 'log10') + 
  facet_grid(cols = vars(waterYear))
```

```{r}
c1_sf_t
```

We could scale by catchment size, but is that the point? Maybe the point is just how much is there? but maybe density is a good idea?

```{r}
c1_sf_d <- veg_catch$centipeda$centipedadf$seedsurv_centipeda %>% 
  mutate(hectares = area_centipeda_seed_survival/10000,
         catchArea = as.numeric(st_area(Shape))/10000,
         density = hectares/catchArea) %>% 
  ggplot() +
  geom_sf(mapping = aes(fill = density)) +
  scale_fill_continuous_sequential(palette = 'GnBu') + 
  facet_grid(cols = vars(waterYear))
```

```{r}
c1_sf_d
```

So, that is how much of the whole catchment passes. It probably makes more sense to ask how much of the available habitat passes, e.g. hectares/(area of all ANAEs in catchment).

They are fundamentally two different questions- one is just how much is there, in which case the unscaled sum is best. The other is about how able it is to take advantage of habitat, and then this one is best.

How would we get at the ANAE scaling? Clip to just those that are in the ANAE type? or all ANAEs? Then get those per catchment (should be easy with getting the area on the ANAEs and summarising to catchment).

I've now provided a few different scalings in `veg_yr_prep`- proportion catchment, proportion wetlands, and proportion habitat

Let's replot some of the above

Catchment

```{r}
l_cprop_1 <- veg_catch$lippia$lippiadf$germ_Lippia %>% 
  filter(date == datewanted) %>% 
  ggplot() +
  geom_sf(mapping = aes(fill = as.numeric(proportion_catchment))) +
  scale_fill_continuous_sequential(palette = 'YlOrRd')

l_cprop_2 <- veg_catch$lippia$lippiadf$surv_Lippia %>% 
  filter(date == datewanted) %>% 
  ggplot() +
  geom_sf(mapping = aes(fill = proportion_catchment)) +
  scale_fill_continuous_sequential(palette = 'YlOrRd')

l_cprop_3 <- veg_catch$lippia$lippiadf$germSurv_Lippia %>% 
  filter(date == datewanted) %>% 
  ggplot() +
  geom_sf(mapping = aes(fill = proportion_catchment)) +
  scale_fill_continuous_sequential(palette = 'YlOrRd')

l_cprop_4 <- veg_catch$lippia$lippiadf$fullCycle_anae_lippia %>% 
  filter(date == datewanted) %>% 
  ggplot() +
  geom_sf(mapping = aes(fill = proportion_catchment)) +
  scale_fill_continuous_sequential(palette = 'YlOrRd')

(l_cprop_1 + l_cprop_2) / (l_cprop_3 + l_cprop_4)
```

But of the available habitat, how much did they use? Ah, but proportion habitat doesn't make sense for the ones that haven't been habitat-clipped. So we'll look at proportion wetlands, and then do the habitat drop later

```{r}
l_eprop_1 <- veg_catch$lippia$lippiadf$germ_Lippia %>% 
  filter(date == datewanted) %>% 
  ggplot() +
  geom_sf(mapping = aes(fill = as.numeric(proportion_wetlands))) +
  scale_fill_continuous_sequential(palette = 'YlOrRd')

l_eprop_2 <- veg_catch$lippia$lippiadf$surv_Lippia %>% 
  filter(date == datewanted) %>% 
  ggplot() +
  geom_sf(mapping = aes(fill = proportion_wetlands)) +
  scale_fill_continuous_sequential(palette = 'YlOrRd')

l_eprop_3 <- veg_catch$lippia$lippiadf$germSurv_Lippia %>% 
  filter(date == datewanted) %>% 
  ggplot() +
  geom_sf(mapping = aes(fill = proportion_wetlands)) +
  scale_fill_continuous_sequential(palette = 'YlOrRd')

l_eprop_4 <- veg_catch$lippia$lippiadf$fullCycle_anae_lippia %>% 
  filter(date == datewanted) %>% 
  ggplot() +
  geom_sf(mapping = aes(fill = proportion_wetlands)) +
  scale_fill_continuous_sequential(palette = 'YlOrRd')

(l_eprop_1 + l_eprop_2) / (l_eprop_3 + l_eprop_4)
```

If we want to see the effect of restricting habitat, we can compare the germSurv with the same thing but anae-restricted

```{r}
l_hprop_3 <- veg_catch$lippia$lippiadf$germSurv_Lippia %>% 
  filter(date == datewanted) %>% 
  ggplot() +
  geom_sf(mapping = aes(fill = proportion_habitat)) +
  scale_fill_continuous_sequential(palette = 'YlOrRd')

l_hprop_4 <- veg_catch$lippia$lippiadf$fullCycle_anae_lippia %>% 
  filter(date == datewanted) %>% 
  ggplot() +
  geom_sf(mapping = aes(fill = proportion_habitat)) +
  scale_fill_continuous_sequential(palette = 'YlOrRd')

(l_hprop_3 + l_hprop_4)
```

That's still a bit goofy- the proportion habitat is likely really only relevant if looked at for the hab-cropped through time or between species.

But maybe what's interesting is the proportion environment, and what that means for change in area

```{r}
simpleFull_lippia <- veg_catch$lippia$lippiadf$fullCycle_anae_lippia %>% 
  st_drop_geometry() %>% 
  select(date, 
         area_germ_surv_anae = area_germ_and_surv, 
         ValleyName, 
         proportion_wetlands_anae = proportion_wetlands, 
         proportion_habitat_anae = proportion_habitat)


prepostanae_lippia <- veg_catch$lippia$lippiadf$germSurv_Lippia %>% 
  left_join(simpleFull_lippia) %>% 
  mutate(reduction_area_hectares = (area_germ_and_surv-area_germ_surv_anae)/10000)

# The areal reduction
l_anaereduce <- prepostanae_lippia %>% 
  filter(date == datewanted) %>% 
  ggplot() +
  geom_sf(mapping = aes(fill = reduction_area_hectares)) +
  scale_fill_continuous_sequential(palette = 'Plasma')

l_anaereduce
```

So, that's a thing we could do more generally- area lost per step. Or could do relative loss per step. Either way, will need to equalize the scale bar

Can I make that set of plots with the new dataframe and `baseline`?

What are the steps?

```{r}
unique(veg_catch$lippia$lippiadf_cat$strict_level)
```

Start with total and then look at loss. The comparison is germSurv - germ and full - germsurv, so is negative when there's a loss of area, but it makes more sense to say 'fewer' and take the negative of the outcome.

Can I get some limits? not without doing the comparisons. So do them first.

```{r}
comp_gs_g <- veg_catch$lippia$lippiadf_cat  %>% 
  baseline(comp_col = strict_level, baselev = 'germ_Lippia', groupers = c(date, ValleyName), val_col = area_passing, FUN = difference) %>% 
  filter(strict_level == 'germSurv_Lippia') %>% 
  mutate(across(contains('difference'), \(x) -x/1000))

names(comp_gs_g)[str_detect(names(comp_gs_g), 'difference')] <- 'hectare_reduction'

comp_f_gs <- veg_catch$lippia$lippiadf_cat  %>% 
  baseline(comp_col = strict_level, baselev = 'germSurv_Lippia', groupers = c(date, ValleyName), val_col = area_passing, FUN = difference) %>% 
  filter(strict_level == 'fullCycle_anae_lippia') %>% 
  mutate(across(contains('difference'), \(x) -x/1000))

names(comp_f_gs)[str_detect(names(comp_f_gs), 'difference')] <- 'hectare_reduction'

# This doesn't do a date subset. But we could if it's all part of a setup function.
commonlims <- c(min(c(comp_gs_g$hectare_reduction, comp_f_gs$hectare_reduction), 
                    na.rm = TRUE), 
                max(c(comp_gs_g$hectare_reduction, comp_f_gs$hectare_reduction), 
                    na.rm = TRUE))
```

```{r}
l_1 <- veg_catch$lippia$lippiadf_cat  %>% 
  filter(strict_level == 'germ_Lippia') %>% 
  ggplot() +
  geom_sf(mapping = aes(fill = area_passing/10000)) +
  scale_fill_continuous_sequential(palette = 'Viridis') + 
  labs(fill = 'hectares\npassing')

l_2 <- comp_gs_g %>% 
  ggplot() +
  geom_sf(mapping = aes(fill = hectare_reduction)) +
  scale_fill_continuous_sequential(palette = 'Plasma', limits = commonlims) + 
  labs(fill = 'hectares\nfewer')

l_3 <- comp_f_gs %>% 
  ggplot() +
  geom_sf(mapping = aes(fill = hectare_reduction)) +
  scale_fill_continuous_sequential(palette = 'Plasma', limits = commonlims) + 
  labs(fill = 'hectares\nfewer')


```

Need to do some plot cleanup there, but that seems to work.

```{r}
l_1 + l_2 + l_3
```

Cool. There's an argument here for looking at the change in the proportion of wetlands utilized, but that's an easy enough change.

## centipeda

Now, make a similar plot for centipeda

What are the steps?

```{r}
unique(veg_catch$centipeda$centipedadf_cat$strict_level)
```

Start with total and then look at loss. The comparisons wil be seedsurv_germ - seedsurv, seedsurv_germ_fruit-seedsurv_germ, fullcyle_anae - seedsurv_germ_fruit, and fullcycle_lippia-fullcycle_anae. That makes them so is negative when there's a loss of area, but it makes more sense to say 'fewer' and take the negative of the outcome.

Do comparisons first

```{r}
comp_gss_ss <- veg_catch$centipeda$centipedadf_cat  %>% 
  baseline(comp_col = strict_level, baselev = 'seedsurv_centipeda', groupers = c(date, ValleyName), val_col = area_passing, FUN = difference) %>% 
  filter(strict_level == 'seedsurv_germ_centipeda') %>% 
  mutate(across(contains('difference'), \(x) -x/1000))

names(comp_gss_ss)[str_detect(names(comp_gss_ss), 'difference')] <- 'hectare_reduction'

comp_f_gss <- veg_catch$centipeda$centipedadf_cat  %>% 
  baseline(comp_col = strict_level, baselev = 'seedsurv_germ_centipeda', groupers = c(date, ValleyName), val_col = area_passing, FUN = difference) %>% 
  filter(strict_level == 'seedsurv_germ_fruit_centipeda') %>% 
  mutate(across(contains('difference'), \(x) -x/1000))

names(comp_f_gss)[str_detect(names(comp_f_gss), 'difference')] <- 'hectare_reduction'

comp_an_f <- veg_catch$centipeda$centipedadf_cat  %>% 
  baseline(comp_col = strict_level, baselev = 'seedsurv_germ_fruit_centipeda', groupers = c(date, ValleyName), val_col = area_passing, FUN = difference) %>% 
  filter(strict_level == 'fullCycle_anae_centipeda') %>% 
  mutate(across(contains('difference'), \(x) -x/1000))

names(comp_an_f)[str_detect(names(comp_an_f), 'difference')] <- 'hectare_reduction'

comp_L_an <- veg_catch$centipeda$centipedadf_cat  %>% 
  baseline(comp_col = strict_level, baselev = 'fullCycle_anae_centipeda', groupers = c(date, ValleyName), val_col = area_passing, FUN = difference) %>% 
  filter(strict_level == 'fullCycle_lippiaLimit_centipeda') %>% 
  mutate(across(contains('difference'), \(x) -x/1000))

names(comp_L_an)[str_detect(names(comp_L_an), 'difference')] <- 'hectare_reduction'

# This doesn't do a date subset. But we could if it's all part of a setup function.
commonlims <- c(min(c(comp_gss_ss$hectare_reduction, 
                      comp_f_gss$hectare_reduction,
                      comp_an_f$hectare_reduction,
                      comp_L_an$hectare_reduction), 
                    na.rm = TRUE), 
                max(c(comp_gss_ss$hectare_reduction, 
                      comp_f_gss$hectare_reduction,
                      comp_an_f$hectare_reduction,
                      comp_L_an$hectare_reduction), 
                    na.rm = TRUE))
```

```{r}
c_base <- veg_catch$centipeda$centipedadf_cat  %>% 
  filter(strict_level == 'seedsurv_centipeda') %>% 
  ggplot() +
  geom_sf(mapping = aes(fill = area_passing/10000)) +
  scale_fill_continuous_sequential(palette = 'Viridis') + 
  labs(fill = 'hectares\npassing')

c_2 <- comp_gss_ss %>% 
  ggplot() +
  geom_sf(mapping = aes(fill = hectare_reduction)) +
  scale_fill_continuous_sequential(palette = 'Plasma', limits = commonlims) + 
  labs(fill = 'hectares\nfewer')

c_3 <- comp_f_gss %>% 
  ggplot() +
  geom_sf(mapping = aes(fill = hectare_reduction)) +
  scale_fill_continuous_sequential(palette = 'Plasma', limits = commonlims) + 
  labs(fill = 'hectares\nfewer')

c_4 <- comp_an_f %>% 
  ggplot() +
  geom_sf(mapping = aes(fill = hectare_reduction)) +
  scale_fill_continuous_sequential(palette = 'Plasma', limits = commonlims) + 
  labs(fill = 'hectares\nfewer')

c_5 <- comp_L_an %>% 
  ggplot() +
  geom_sf(mapping = aes(fill = hectare_reduction)) +
  scale_fill_continuous_sequential(palette = 'Plasma', limits = commonlims) + 
  labs(fill = 'hectares\nfewer')

```

Need to do some plot cleanup there, but that seems to work.

```{r}
(c_base + c_2 + c_3) / (c_4 + c_5)
```

Huh. Did I stuff something up, or is th scale just too big? Take the limits off.

```{r}
c_base <- veg_catch$centipeda$centipedadf_cat  %>% 
  filter(strict_level == 'seedsurv_centipeda') %>% 
  ggplot() +
  geom_sf(mapping = aes(fill = area_passing/10000)) +
  scale_fill_continuous_sequential(palette = 'Viridis') + 
  labs(fill = 'hectares\npassing')

c_2 <- comp_gss_ss %>% 
  ggplot() +
  geom_sf(mapping = aes(fill = hectare_reduction)) +
  scale_fill_continuous_sequential(palette = 'Plasma') + 
  labs(fill = 'hectares\nfewer')

c_3 <- comp_f_gss %>% 
  ggplot() +
  geom_sf(mapping = aes(fill = hectare_reduction)) +
  scale_fill_continuous_sequential(palette = 'Plasma') + 
  labs(fill = 'hectares\nfewer')

c_4 <- comp_an_f %>% 
  ggplot() +
  geom_sf(mapping = aes(fill = hectare_reduction)) +
  scale_fill_continuous_sequential(palette = 'Plasma') + 
  labs(fill = 'hectares\nfewer')

c_5 <- comp_L_an %>% 
  ggplot() +
  geom_sf(mapping = aes(fill = hectare_reduction)) +
  scale_fill_continuous_sequential(palette = 'Plasma') + 
  labs(fill = 'hectares\nfewer')

```

```{r}
(c_base + c_2 + c_3) / (c_4 + c_5)
```

Ok, so that is working, but the hit at step 1 is so big it's hard to see what's happening with a common scale. I guess scrap the common scale?

Quickly, how about some bars? I think maybe don't need to use the calculated values here. Look at proportion wetlands.

```{r}
veg_catch$centipeda$centipedadf_cat %>% 
  mutate(strict_level = factor(strict_level, levels = c('seedsurv_centipeda', 'seedsurv_germ_centipeda', 'seedsurv_germ_fruit_centipeda', 'fullCycle_anae_centipeda', 'fullCycle_lippiaLimit_centipeda') )) %>% 
ggplot() + 
  geom_col(mapping = aes(x = ValleyName, fill = strict_level, y = proportion_wetlands), position = position_dodge())
```
